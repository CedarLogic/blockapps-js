var BigInt = require("big-integer");

module.exports = Int;

function Int(hexString) {
    this._value = asInt(hexString);
    this.valueOf = this._value.valueOf;
    this.bytesOf = function () {
        var result = this._value.toString(16);
        if (this._value.ge(0)) {
            while (result.length < 32) {
                result = "00" + result;
            }
        }
        else {
            while (result.length < 32) {
                result = "ff" + result;
            }
        }
        return result;
    }
    this.toString = this._value.toString;

    this.shift = toIntFunc(this._value.shiftLeft).bind(this);

    this.plus  = toIntOp(this._value.plus).bind(this);
    this.minus = toIntOp(this._value.minus).bind(this);
    this.times = toIntOp(this._value.times).bind(this);
    this.over  = toIntOp(this._value.over).bind(this);
    this.mod   = toIntOp(this._value.mod).bind(this);
    this.divmod = toIntOp(this._value.divmod).bind(this);
    this.and   = toIntOp(this._value.and).bind(this);
    this.or    = toIntOp(this._value.or).bind(this);
    this.xor   = toIntOp(this._value.xor).bind(this);
    this.not   = toIntOp(this._value.not).bind(this);
    this.pow   = toIntOp(this._value.pow).bind(this);
        
    this.lt  = toValOp(this._value.lt).bind(this);
    this.leq = toValOp(this._value.leq).bind(this);
    this.gt  = toValOp(this._value.lt).bind(this);
    this.geq = toValOp(this._value.geq).bind(this);
    this.eq  = toValOp(this._value.eq).bind(this);
    this.neq = toValOp(this._value.neq).bind(this);
    this.compare = toValOp(this._value.compare).bind(this);
}

function asInt(hexString) {
    if (hexString.slice(0,2) === "0x") {
        hexString = hexString.slice(2);
    }
    return BigInt(hexString,16);
}

function toIntFunc(bigIntOp) {
    return function (x) {
        return new Integer(bigIntOp(x), this.byteLength);
    }
}

function toIntOp(bigIntOp) {
    return function (x) {
        var byteLength = max(this.byteLength, x.byteLength);
        return new Integer(bigIntOp(x._value), byteLength);
    };
}

function toValOp(bigIntOp) {
    return function (x) {
        return bigIntOp(x._value);
    }
}

module.exports = Storage;

function Storage() {
    this._keyvals = {};
    this.sync = function(apiURL, f) {
        set_keyvals = (function(keyvals) {
            this._keyvals = keyvals;
            f();
        }).bind(this)
        queryAPI(apiURL + "/query/storage?address=" + address,
                 makeStorageKeyVals, set_keyvals);
    }
    this.atKey = function(keyhex) {
        var keyNum = asInt(keyhex);
        if (typeof this._keyvals[keyNum] === "undefined") {
            return exports.hexStringAs64Nibbles("0x");
        }
        else {
            return this._keyvals[keyNum];
        }
    }
    this.chunk = function(startHex, itemsNum) {
        var startNum = asInt(startHex);
        var output = [];

        this._keyvals.keys().sort(function c(x,y) {return x.compare(y);}).map(
            function(keyNum) {
                if (keyNum.ge(startNum) && keyNum.lt(startNum.plus(itemsNum))) {
                    // Intentional conversion to native numbers
                    var skipped = keyNum.minus(startNum) - output.length;
                    pushZeros(skipped);
                    output.push(this._keyvals(key));
                }
            });
        var remaining = itemsNum - output.length;
        pushZeros(remaining);
        return output;
    }
}

function makeStorageKeyVals(storageQueryResponse) {
    var keyvals = {};
    storageQueryResponse.forEach(function(x) {
        var canonKey = asInt(x.key);
        var canonValue = exports.hexStringAs64Nibbles(x.value);
        keyvals[canonKey] = canonValue;
    });
    return keyvals;
}

function pushZeros(output, count) {
    for (i = 0; i < count; ++i) {
        output.push(hexStringAs64Nibbles("0x"));
    }
}


var ethTransaction = require('ethereumjs-tx');
var utils = require('ethereumjs-util');

module.exports = Transaction;

function Transaction(fromAccount, toAccount, data, value, gasPrice, gasLimit) {
    this.from = fromAccount.address;
    this.gasPrice = gasPrice;
    this.gasLimit = gasLimit;
    if (toAccount.address !== null) {
        this.to = toAccount.address.valueOf();
    }
    this.value = value
    this.codeOrData = data;

    // These are set when sending because the nonce must be current
    this.nonce = undefined;
    this.r = undefined;
    this.s = undefined;
    this.v = undefined;
    this.hash = undefined;

    // Don't show up in the JSON
    this.send = sendTransaction.bind(this);
    this.contractCreated = getContractCreated.bind(this);
    this._fromAccount = fromAccount;
}

function getContractCreated(apiURL, callback) {
    function firstContractCreated(transactionResultResponse) {
        return transactionResultResponse[0].contractsCreated.split(",")[0];
    }

    queryAPI(apiURL + "/transactionResult/" + this.hash,
                     firstContractCreated, callback);
}

function setCryptData(apiURL, callback) {
    var tx = new ethTransaction();

    tx.gasPrice = this.gasPrice;
    tx.gasLimit = this.gasLimit;
    tx.value = this.value;
    tx.data = this.data;
    if (typeof this.to !== "undefined") {
        tx.to = this.to;
    }

    function copyCryptData () {
        tx.nonce = this.nonce = this._fromAccount.nonce;
        
        tx.sign(this._fromAccount.privateKey);

        this.r = (tx.r).toString('hex');
        this.s = (tx.s).toString('hex');
        this.v = (tx.v).toString('hex');
        this.hash = tx.hash().toString('hex');

        callback();
    }

    this._fromAccount.sync(apiURL, copyCryptData.bind(this));
}

function sendTransaction(apiURL, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", apiURL + "/includetransaction", true);
    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');   

    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
            if (typeof callback === "function") {
                var poller = setInterval(checkTX, 500);
                function checkTX () {
                    queryAPI(apiURL + "/query/transaction?hash=" + this.hash,
                             function (txList) { return txList.length != 0; },
                             cancelPollAndCallback);            
                }
                function cancelPollAndCallback (txPosted) {
                    if (txPosted) {
                        clearInterval(poller);
                        callback(this);
                    }
                }
            }
        }
    }

    this.setCryptData(apiURL, function () {
        var jsonFields = ["from","to","nonce","value","gasPrice","gasLimit",
                          "codeOrData","r","s","v","hash"];
        var txString = JSON.stringify(this, jsonFields);
        xhr.send(txString);
    });
}

function queryAPI (queryURL, handleResponse, callback) {
    var oReq = new XMLHttpRequest();
    oReq.open("GET", queryURL, true);
    oReq.onload = function () { 
        if(oReq.readyState == 4 && oReq.status == 200) {
	    var response = JSON.parse(this.responseText)
            callback(handleResponse(response));
	}
        else {
            console.log(this.responseText);
        }
    }

    oReq.send();
}

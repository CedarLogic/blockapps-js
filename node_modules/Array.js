var Int = require("Int.js");

module.exports = SolArray;

function SolArray(jsArr, isFixed) {
    if (isFixed === undefined) {
        isFixed = true;
    }
    if (this instanceof SolArray) {
        this.isFixed = isFixed;
        for (var i = 0; i < jsArr.length; ++i) {
            this.push(jsArr[i]);
        }
    }
    else {
        return new SolArray(jsArr, isFixed);
    }
}

SolArray.prototype = Object.create(
    Array.prototype,
    {
        toString : {
            enumerable : true,
            value : function() {
                return "[" + Array.prototype.toString.call(this) + "]";
            }
        },
        toJSON : {
            enumerable : true,
            value : function () { return this.toString(); }
        },
        encoding : {
            enumerable : true,
            value : encodingArray
        },
    }
);
SolArray.prototype.constructor = SolArray;
Object.defineProperties(SolArray.prototype, {constructor : {enumerable:false}});

function encodingArray() {
    var totalHeadLength = 0;
    var head = [];
    var tail = [];

    for (var i = 0; i < this.length; ++i) {
        var obj = this[i];
        if (!obj.isFixed)
        {
            totalHeadLength += 32;
            head.push(undefined);
            tail.push(obj.encoding());
        }
        else {
            var enc = obj.encoding();
            totalHeadLength += enc.length/2; // Bytes not nibbles
            head.push(enc);
            tail.push("");
        }
    }

    var currentTailLength = 0;
    for (var i = 0; i < tail.length; ++i) {
        if (head[i] === undefined) {
            head[i] = Int(totalHeadLength + currentTailLength).encoding();
        }
        currentTailLength += tail[i].length;
    }

    var enc = head.join("") + tail.join("");
    if (!this.isFixed) {
        len = Int(this.length).encoding()
        enc = len + enc
    }

    return enc;
}
